#!/usr/bin/env node

/**
 * post merge things to check:
 *
 * ui tests run
 * pie info still works
 * pits builds
 *
 *
 * test manual fixes ..
 *
 * > demo/config needed for  match
 * > remove inline mock render-ui declarations
 *
 * park - browser module builds
 */

const fs = require('fs-extra');
const path = require('path');
const pkgsPath = path.resolve(__dirname, '../packages');
const uiPkgs = path.resolve(__dirname, '../../pie-ui/packages');
const minimist = require('minimist');
const args = minimist(process.argv.slice(2));

console.log('args:', args);

const updatePkgJson = async (uiDir, elDir) => {
  const uip = await fs.readJson(path.join(uiDir, 'package.json'));
  const ep = await fs.readJson(path.join(elDir, 'package.json'));

  delete ep.pie;
  delete ep.dependencies[uip.name];
  ep.dependencies = { ...ep.dependencies, ...uip.dependencies };
  ep.main = 'lib/index.js';
  ep.module = 'src/index.js';

  await fs.writeJson(path.join(elDir, 'package.json'), ep, { spaces: 2 });
};

const mergePieUi = async (pkgName, pkgsDir, uiPkgsDir) => {
  const uiPkgSrc = path.join(uiPkgs, pkgName, 'src');
  const exists = await fs.pathExists(uiPkgSrc);
  if (exists) {
    await fs.copy(uiPkgSrc, path.join(pkgsPath, pkgName, 'src'));

    await updatePkgJson(
      path.join(uiPkgs, pkgName),
      path.join(pkgsPath, pkgName)
    );
    return { name: pkgName };
  } else {
    return { name: pkgName, message: 'does not exist' };
  }
};

const run = async () => {
  const pkgs = await fs.readdir(pkgsPath);
  console.log('pkgs:', pkgs);

  return Promise.all(
    pkgs.map((p) => {
      return mergePieUi(p, pkgsPath, uiPkgs);
    })
  );
};

run()
  .then((info) => {
    console.log('done', info);
  })
  .catch((e) => {
    console.error('error:', e);
  });
